/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/jquery-accessibleMegaMenu.js":
/*!*********************************************!*\
  !*** ./src/js/jquery-accessibleMegaMenu.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\nCopyright © 2013 Adobe Systems Incorporated.\n\nLicensed under the Apache License, Version 2.0 (the “License”);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an “AS IS” BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * See <a href=\"http://jquery.com\">http://jquery.com</a>.\n * @name jquery\n * @class\n * See the jQuery Library  (<a href=\"http://jquery.com\">http://jquery.com</a>) for full details.  This just\n * documents the function and classes that are added to jQuery by this plug-in.\n */\n\n/**\n * See <a href=\"http://jquery.com\">http://jquery.com</a>\n * @name fn\n * @class\n * See the jQuery Library  (<a href=\"http://jquery.com\">http://jquery.com</a>) for full details.  This just\n * documents the function and classes that are added to jQuery by this plug-in.\n * @memberOf jquery\n */\n\n/**\n * @fileOverview accessibleMegaMenu plugin\n *\n *<p>Licensed under the Apache License, Version 2.0 (the “License”)\n *<br />Copyright © 2013 Adobe Systems Incorporated.\n *<br />Project page <a href=\"https://github.com/adobe-accessibility/Accessible-Mega-Menu\">https://github.com/adobe-accessibility/Accessible-Mega-Menu</a>\n * @version 0.1\n * @author Michael Jordan\n * @requires jquery\n */\n\n/*jslint browser: true, devel: true, plusplus: true, nomen: true */\n\n/*global jQuery, window, document */\n(function ($, window, document) {\n  \"use strict\";\n\n  var pluginName = \"accessibleMegaMenu\",\n      defaults = {\n    uuidPrefix: \"accessible-megamenu\",\n    // unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby\n    menuClass: \"accessible-megamenu\",\n    // default css class used to define the megamenu styling\n    topNavItemClass: \"accessible-megamenu-top-nav-item\",\n    // default css class for a top-level navigation item in the megamenu\n    panelClass: \"accessible-megamenu-panel\",\n    // default css class for a megamenu panel\n    panelGroupClass: \"accessible-megamenu-panel-group\",\n    // default css class for a group of items within a megamenu panel\n    hoverClass: \"hover\",\n    // default css class for the hover state\n    focusClass: \"focus\",\n    // default css class for the focus state\n    openClass: \"open\",\n    // default css class for the open state,\n    toggleButtonClass: \"accessible-megamenu-toggle\",\n    // default css class responsive toggle button\n    openDelay: 0,\n    // default open delay when opening menu via mouseover\n    closeDelay: 250,\n    // default open delay when opening menu via mouseover\n    openOnMouseover: false // default setting for whether menu should open on mouseover\n\n  },\n      Keyboard = {\n    BACKSPACE: 8,\n    COMMA: 188,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    LEFT: 37,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    PERIOD: 190,\n    RIGHT: 39,\n    SPACE: 32,\n    TAB: 9,\n    UP: 38,\n    keyMap: {\n      48: \"0\",\n      49: \"1\",\n      50: \"2\",\n      51: \"3\",\n      52: \"4\",\n      53: \"5\",\n      54: \"6\",\n      55: \"7\",\n      56: \"8\",\n      57: \"9\",\n      59: \";\",\n      65: \"a\",\n      66: \"b\",\n      67: \"c\",\n      68: \"d\",\n      69: \"e\",\n      70: \"f\",\n      71: \"g\",\n      72: \"h\",\n      73: \"i\",\n      74: \"j\",\n      75: \"k\",\n      76: \"l\",\n      77: \"m\",\n      78: \"n\",\n      79: \"o\",\n      80: \"p\",\n      81: \"q\",\n      82: \"r\",\n      83: \"s\",\n      84: \"t\",\n      85: \"u\",\n      86: \"v\",\n      87: \"w\",\n      88: \"x\",\n      89: \"y\",\n      90: \"z\",\n      96: \"0\",\n      97: \"1\",\n      98: \"2\",\n      99: \"3\",\n      100: \"4\",\n      101: \"5\",\n      102: \"6\",\n      103: \"7\",\n      104: \"8\",\n      105: \"9\",\n      190: \".\"\n    }\n  },\n      clearTimeout = window.clearTimeout,\n      setTimeout = window.setTimeout,\n      isOpera = window.opera && window.opera.toString() === '[object Opera]';\n  /**\n   * @desc Creates a new accessible mega menu instance.\n   * @param {jquery} element\n   * @param {object} [options] Mega Menu options\n   * @param {string} [options.uuidPrefix=accessible-megamenu] - Prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby\n   * @param {string} [options.menuClass=accessible-megamenu] - CSS class used to define the megamenu styling\n   * @param {string} [options.topNavItemClass=accessible-megamenu-top-nav-item] - CSS class for a top-level navigation item in the megamenu\n   * @param {string} [options.panelClass=accessible-megamenu-panel] - CSS class for a megamenu panel\n   * @param {string} [options.panelGroupClass=accessible-megamenu-panel-group] - CSS class for a group of items within a megamenu panel\n   * @param {string} [options.hoverClass=hover] - CSS class for the hover state\n   * @param {string} [options.focusClass=focus] - CSS class for the focus state\n   * @param {string} [options.openClass=open] - CSS class for the open state\n   * @constructor\n   */\n\n  function AccessibleMegaMenu(element, options) {\n    this.element = element; // merge optional settings and defaults into settings\n\n    this.settings = $.extend({}, defaults, options);\n    this._defaults = defaults;\n    this._name = pluginName;\n    this.mouseTimeoutID = null;\n    this.focusTimeoutID = null;\n    this.mouseFocused = false;\n    this.justFocused = false;\n    this.init();\n  }\n\n  AccessibleMegaMenu.prototype = function () {\n    /* private attributes and methods ------------------------ */\n    var uuid = 0,\n        keydownTimeoutDuration = 1000,\n        keydownSearchString = \"\",\n        isTouch = 'ontouchstart' in window || window.navigator.msMaxTouchPoints,\n        _getPlugin,\n        _addUniqueId,\n        _togglePanel,\n        _clickHandler,\n        _touchmoveHandler,\n        _clickOutsideHandler,\n        _DOMAttrModifiedHandler,\n        _focusInHandler,\n        _focusOutHandler,\n        _keyDownHandler,\n        _mouseDownHandler,\n        _mouseOverHandler,\n        _mouseOutHandler,\n        _clickToggleHandler,\n        _toggleExpandedEventHandlers,\n        _addEventHandlers,\n        _removeEventHandlers;\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_getPlugin\n     * @desc Returns the parent accessibleMegaMenu instance for a given element\n     * @param {jQuery} element\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _getPlugin = function _getPlugin(element) {\n      return $(element).closest(':data(plugin_' + pluginName + ')').data(\"plugin_\" + pluginName);\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_addUniqueId\n     * @desc Adds a unique id and element.\n     * The id string starts with the\n     * string defined in settings.uuidPrefix.\n     * @param {jQuery} element\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _addUniqueId = function _addUniqueId(element) {\n      element = $(element);\n      var settings = this.settings;\n\n      if (!element.attr(\"id\")) {\n        element.attr(\"id\", settings.uuidPrefix + \"-\" + new Date().getTime() + \"-\" + ++uuid);\n      }\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_togglePanel\n     * @desc Toggle the display of mega menu panels in response to an event.\n     * The optional boolean value 'hide' forces all panels to hide.\n     * @param {event} event\n     * @param {Boolean} [hide] Hide all mega menu panels when true\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _togglePanel = function _togglePanel(event, hide) {\n      var target = $(event.target),\n          that = this,\n          settings = this.settings,\n          menu = this.menu,\n          topli = target.closest('.' + settings.topNavItemClass),\n          panel = target.hasClass(settings.panelClass) ? target : target.closest('.' + settings.panelClass),\n          newfocus;\n\n      _toggleExpandedEventHandlers.call(this, true);\n\n      if (hide) {\n        topli = menu.find('.' + settings.topNavItemClass + ' .' + settings.openClass + ':first').closest('.' + settings.topNavItemClass);\n\n        if (!(topli.is(event.relatedTarget) || topli.has(event.relatedTarget).length > 0)) {\n          if ((event.type === 'mouseout' || event.type === 'focusout') && topli.has(document.activeElement).length > 0) {\n            return;\n          }\n\n          topli.find('[aria-expanded]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');\n\n          if (event.type === 'keydown' && event.keyCode === Keyboard.ESCAPE || event.type === 'DOMAttrModified') {\n            newfocus = topli.find(':tabbable:first');\n            setTimeout(function () {\n              menu.find('[aria-expanded].' + that.settings.panelClass).off('DOMAttrModified.accessible-megamenu');\n              newfocus.focus();\n              that.justFocused = false;\n            }, 99);\n          }\n        } else if (topli.length === 0) {\n          menu.find('[aria-expanded=true]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');\n        }\n      } else {\n        clearTimeout(that.focusTimeoutID);\n        topli.siblings().find('[aria-expanded]').attr('aria-expanded', 'false').removeClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'true');\n        topli.find('[aria-expanded]').attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false');\n        var pageScrollPosition = $('html')[0].scrollTop;\n        var openPanelTopPosition = $('.' + settings.panelClass + '.' + settings.openClass).parent().offset().top;\n\n        if (pageScrollPosition > openPanelTopPosition) {\n          $('html')[0].scrollTop = openPanelTopPosition;\n        }\n\n        if (event.type === 'mouseover' && target.is(':tabbable') && topli.length === 1 && panel.length === 0 && menu.has(document.activeElement).length > 0) {\n          target.focus();\n          that.justFocused = false;\n        }\n\n        _toggleExpandedEventHandlers.call(that);\n      }\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_clickHandler\n     * @desc Handle click event on mega menu item\n     * @param {event} Event object\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _clickHandler = function _clickHandler(event) {\n      var target = $(event.target).closest(':tabbable'),\n          topli = target.closest('.' + this.settings.topNavItemClass),\n          panel = target.closest('.' + this.settings.panelClass);\n\n      if (topli.length === 1 && panel.length === 0 && topli.find('.' + this.settings.panelClass).length === 1) {\n        if (!target.hasClass(this.settings.openClass)) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          _togglePanel.call(this, event);\n\n          this.justFocused = false;\n        } else {\n          if (this.justFocused) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.justFocused = false;\n          } else if (isTouch || !isTouch && !this.settings.openOnMouseover) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            _togglePanel.call(this, event, target.hasClass(this.settings.openClass));\n          }\n        }\n      }\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_touchmoveHandler\n     * @desc Handle touch move event on menu\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _touchmoveHandler = function _touchmoveHandler() {\n      this.justMoved = true;\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_clickOutsideHandler\n     * @desc Handle click event outside of a the megamenu\n     * @param {event} Event object\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _clickOutsideHandler = function _clickOutsideHandler(event) {\n      if ($(event.target).closest(this.menu).length === 0) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        _togglePanel.call(this, event, true);\n      }\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_DOMAttrModifiedHandler\n     * @desc Handle DOMAttrModified event on panel to respond to Windows 8 Narrator ExpandCollapse pattern\n     * @param {event} Event object\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _DOMAttrModifiedHandler = function _DOMAttrModifiedHandler(event) {\n      if (event.originalEvent.attrName === 'aria-expanded' && event.originalEvent.newValue === 'false' && $(event.target).hasClass(this.settings.openClass)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        _togglePanel.call(this, event, true);\n      }\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_focusInHandler\n     * @desc Handle focusin event on mega menu item.\n     * @param {event} Event object\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _focusInHandler = function _focusInHandler(event) {\n      clearTimeout(this.focusTimeoutID);\n      var target = $(event.target),\n          panel = target.closest('.' + this.settings.panelClass);\n      target.addClass(this.settings.focusClass);\n      this.justFocused = !this.mouseFocused || !this.settings.openOnMouseover && this.mouseFocused;\n      this.mouseFocused = false;\n\n      if (this.justFocused && this.panels.not(panel).filter('.' + this.settings.openClass).length) {\n        _togglePanel.call(this, event);\n      }\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_focusOutHandler\n     * @desc Handle focusout event on mega menu item.\n     * @param {event} Event object\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _focusOutHandler = function _focusOutHandler(event) {\n      this.justFocused = false;\n      var that = this,\n          target = $(event.target),\n          topli = target.closest('.' + this.settings.topNavItemClass);\n      target.removeClass(this.settings.focusClass);\n\n      if (window.cvox) {\n        // If ChromeVox is running...\n        that.focusTimeoutID = setTimeout(function () {\n          window.cvox.Api.getCurrentNode(function (node) {\n            if (topli.has(node).length) {\n              // and the current node being voiced is in\n              // the mega menu, clearTimeout,\n              // so the panel stays open.\n              clearTimeout(that.focusTimeoutID);\n            } else {\n              that.focusTimeoutID = setTimeout(function (scope, event, hide) {\n                _togglePanel.call(scope, event, hide);\n              }, 275, that, event, true);\n            }\n          });\n        }, 25);\n      } else {\n        that.focusTimeoutID = setTimeout(function () {\n          if (that.mouseFocused && event.relatedTarget === null) {\n            return;\n          }\n\n          _togglePanel.call(that, event, true);\n        }, 300);\n      }\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_keyDownHandler\n     * @desc Handle keydown event on mega menu.\n     * @param {event} Event object\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _keyDownHandler = function _keyDownHandler(event) {\n      var that = this.constructor === AccessibleMegaMenu ? this : _getPlugin(this),\n          // determine the AccessibleMegaMenu plugin instance\n      settings = that.settings,\n          target = $($(this).is('.' + settings.hoverClass + ':tabbable') ? this : event.target),\n          // if the element is hovered the target is this, otherwise, its the focused element\n      menu = that.menu,\n          topnavitems = that.topnavitems,\n          topli = target.closest('.' + settings.topNavItemClass),\n          tabbables = menu.find(':tabbable'),\n          panel = target.hasClass(settings.panelClass) ? target : target.closest('.' + settings.panelClass),\n          panelGroups = panel.find('.' + settings.panelGroupClass),\n          currentPanelGroup = target.closest('.' + settings.panelGroupClass),\n          next,\n          keycode = event.keyCode || event.which,\n          start,\n          i,\n          o,\n          label,\n          found = false,\n          newString = Keyboard.keyMap[event.keyCode] || '',\n          regex,\n          isTopNavItem = topli.length === 1 && panel.length === 0;\n\n      if (target.is(\"input:focus, select:focus, textarea:focus, button:focus\")) {\n        // if the event target is a form element we should handle keydown normally\n        return;\n      }\n\n      if (target.is('.' + settings.hoverClass + ':tabbable')) {\n        $('html').off('keydown.accessible-megamenu');\n      }\n\n      switch (keycode) {\n        case Keyboard.ESCAPE:\n          this.mouseFocused = false;\n\n          _togglePanel.call(that, event, true);\n\n          break;\n\n        case Keyboard.DOWN:\n          event.preventDefault();\n          this.mouseFocused = false;\n\n          if (isTopNavItem) {\n            _togglePanel.call(that, event);\n\n            found = topli.find('.' + settings.panelClass + ' :tabbable:first').focus().length === 1;\n          } else {\n            found = tabbables.filter(':gt(' + tabbables.index(target) + '):first').focus().length === 1;\n          }\n\n          if (!found && isOpera && (event.ctrlKey || event.metaKey)) {\n            tabbables = $(':tabbable');\n            i = tabbables.index(target);\n            found = $(':tabbable:gt(' + $(':tabbable').index(target) + '):first').focus().length === 1;\n          }\n\n          break;\n\n        case Keyboard.UP:\n          event.preventDefault();\n          this.mouseFocused = false;\n\n          if (isTopNavItem && target.hasClass(settings.openClass)) {\n            _togglePanel.call(that, event, true);\n\n            next = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last');\n\n            if (next.children('.' + settings.panelClass).length) {\n              found = next.find('[aria-expanded]').attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false').find(':tabbable:last').focus() === 1;\n            }\n          } else if (!isTopNavItem) {\n            found = tabbables.filter(':lt(' + tabbables.index(target) + '):last').focus().length === 1;\n          }\n\n          if (!found && isOpera && (event.ctrlKey || event.metaKey)) {\n            tabbables = $(':tabbable');\n            i = tabbables.index(target);\n            found = $(':tabbable:lt(' + $(':tabbable').index(target) + '):first').focus().length === 1;\n          }\n\n          break;\n\n        case Keyboard.RIGHT:\n          event.preventDefault();\n          this.mouseFocused = false;\n\n          if (isTopNavItem) {\n            found = topnavitems.filter(':gt(' + topnavitems.index(topli) + '):first').find(':tabbable:first').focus().length === 1;\n          } else {\n            if (panelGroups.length && currentPanelGroup.length) {\n              // if the current panel contains panel groups, and we are able to focus the first tabbable element of the next panel group\n              found = panelGroups.filter(':gt(' + panelGroups.index(currentPanelGroup) + '):first').find(':tabbable:first').focus().length === 1;\n            }\n\n            if (!found) {\n              found = topli.find(':tabbable:first').focus().length === 1;\n            }\n          }\n\n          break;\n\n        case Keyboard.LEFT:\n          event.preventDefault();\n          this.mouseFocused = false;\n\n          if (isTopNavItem) {\n            found = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last').find(':tabbable:first').focus().length === 1;\n          } else {\n            if (panelGroups.length && currentPanelGroup.length) {\n              // if the current panel contains panel groups, and we are able to focus the first tabbable element of the previous panel group\n              found = panelGroups.filter(':lt(' + panelGroups.index(currentPanelGroup) + '):last').find(':tabbable:first').focus().length === 1;\n            }\n\n            if (!found) {\n              found = topli.find(':tabbable:first').focus().length === 1;\n            }\n          }\n\n          break;\n\n        case Keyboard.TAB:\n          this.mouseFocused = false;\n          i = tabbables.index(target);\n\n          if (event.shiftKey && isTopNavItem && target.hasClass(settings.openClass)) {\n            _togglePanel.call(that, event, true);\n\n            next = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last');\n\n            if (next.children('.' + settings.panelClass).length) {\n              found = next.children().attr('aria-expanded', 'true').addClass(settings.openClass).filter('.' + settings.panelClass).attr('aria-hidden', 'false').find(':tabbable:last').focus();\n            }\n          } else if (event.shiftKey && i > 0) {\n            found = tabbables.filter(':lt(' + i + '):last').focus().length === 1;\n          } else if (!event.shiftKey && i < tabbables.length - 1) {\n            found = tabbables.filter(':gt(' + i + '):first').focus().length === 1;\n          } else if (isOpera) {\n            tabbables = $(':tabbable');\n            i = tabbables.index(target);\n\n            if (event.shiftKey) {\n              found = $(':tabbable:lt(' + $(':tabbable').index(target) + '):last').focus().length === 1;\n            } else {\n              found = $(':tabbable:gt(' + $(':tabbable').index(target) + '):first').focus().length === 1;\n            }\n          }\n\n          if (found) {\n            event.preventDefault();\n          }\n\n          break;\n\n        case Keyboard.SPACE:\n        case Keyboard.ENTER:\n          if (isTopNavItem) {\n            event.preventDefault();\n\n            _clickHandler.call(that, event);\n          } else {\n            return true;\n          }\n\n          break;\n\n        default:\n          // alphanumeric filter\n          clearTimeout(this.keydownTimeoutID);\n          keydownSearchString += newString !== keydownSearchString ? newString : '';\n\n          if (keydownSearchString.length === 0) {\n            return;\n          }\n\n          this.keydownTimeoutID = setTimeout(function () {\n            keydownSearchString = '';\n          }, keydownTimeoutDuration);\n\n          if (isTopNavItem && !target.hasClass(settings.openClass)) {\n            tabbables = tabbables.filter(':not(.' + settings.panelClass + ' :tabbable)');\n          } else {\n            tabbables = topli.find(':tabbable');\n          }\n\n          if (event.shiftKey) {\n            tabbables = $(tabbables.get().reverse());\n          }\n\n          for (i = 0; i < tabbables.length; i++) {\n            o = tabbables.eq(i);\n\n            if (o.is(target)) {\n              start = keydownSearchString.length === 1 ? i + 1 : i;\n              break;\n            }\n          }\n\n          regex = new RegExp('^' + keydownSearchString.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&'), 'i');\n\n          for (i = start; i < tabbables.length; i++) {\n            o = tabbables.eq(i);\n            label = $.trim(o.text());\n\n            if (regex.test(label)) {\n              found = true;\n              o.focus();\n              break;\n            }\n          }\n\n          if (!found) {\n            for (i = 0; i < start; i++) {\n              o = tabbables.eq(i);\n              label = $.trim(o.text());\n\n              if (regex.test(label)) {\n                o.focus();\n                break;\n              }\n            }\n          }\n\n          break;\n      }\n\n      that.justFocused = false;\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_mouseDownHandler\n     * @desc Handle mousedown event on mega menu.\n     * @param {event} Event object\n     * @memberof accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _mouseDownHandler = function _mouseDownHandler(event) {\n      if ($(event.target).closest(this.settings.panelClass) || $(event.target).closest(\":focusable\").length) {\n        this.mouseFocused = true;\n\n        if ($(event.target).closest(this.settings.menuClass)) {\n          $('html').on('keydown.accessible-megamenu', $.proxy(_keyDownHandler, event.target));\n        }\n      }\n\n      clearTimeout(this.mouseTimeoutID);\n      this.mouseTimeoutID = setTimeout(function () {\n        clearTimeout(this.focusTimeoutID);\n      }, 1);\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_mouseOverHandler\n     * @desc Handle mouseover event on mega menu.\n     * @param {event} Event object\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _mouseOverHandler = function _mouseOverHandler(event) {\n      clearTimeout(this.mouseTimeoutID);\n      var that = this;\n\n      if (!that.settings.openOnMouseover) {\n        return;\n      }\n\n      this.mouseTimeoutID = setTimeout(function () {\n        $(event.target).addClass(that.settings.hoverClass);\n\n        _togglePanel.call(that, event);\n\n        if ($(event.target).closest(that.settings.menuClass)) {\n          $('html').on('keydown.accessible-megamenu', $.proxy(_keyDownHandler, event.target));\n        }\n      }, this.settings.openDelay);\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_mouseOutHandler\n     * @desc Handle mouseout event on mega menu.\n     * @param {event} Event object\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _mouseOutHandler = function _mouseOutHandler(event) {\n      clearTimeout(this.mouseTimeoutID);\n      var that = this;\n\n      if (!that.settings.openOnMouseover) {\n        return;\n      }\n\n      $(event.target).removeClass(that.settings.hoverClass);\n      that.mouseTimeoutID = setTimeout(function () {\n        _togglePanel.call(that, event, true);\n      }, this.settings.closeDelay);\n\n      if ($(event.target).is(':tabbable')) {\n        $('html').off('keydown.accessible-megamenu');\n      }\n    };\n    /**\n     * @name jQuery.fn.accessibleMegaMenu~_clickToggleHandler\n     * @desc Handle click event on menu toggle button.\n     * @memberof jQuery.fn.accessibleMegaMenu\n     * @inner\n     * @private\n     */\n\n\n    _clickToggleHandler = function _clickToggleHandler() {\n      var isExpanded = this.toggleButton.attr('aria-expanded') === 'true';\n      this.toggleButton.attr({\n        'aria-expanded': !isExpanded,\n        'aria-pressed': !isExpanded\n      });\n    };\n\n    _toggleExpandedEventHandlers = function _toggleExpandedEventHandlers(hide) {\n      var menu = this.menu;\n\n      if (hide) {\n        $('html').off('mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu');\n        menu.find('[aria-expanded].' + this.settings.panelClass).off('DOMAttrModified.accessible-megamenu');\n      } else {\n        $('html').on('mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu', $.proxy(_clickOutsideHandler, this));\n        /* Narrator in Windows 8 automatically toggles the aria-expanded property on double tap or click.\n           To respond to the change to collapse the panel, we must add a listener for a DOMAttrModified event. */\n\n        menu.find('[aria-expanded=true].' + this.settings.panelClass).on('DOMAttrModified.accessible-megamenu', $.proxy(_DOMAttrModifiedHandler, this));\n      }\n    };\n\n    _addEventHandlers = function _addEventHandlers() {\n      var menu = this.menu,\n          toggleButton = this.toggleButton;\n      menu.on(\"focusin.accessible-megamenu\", \":focusable, .\" + this.settings.panelClass, $.proxy(_focusInHandler, this)).on(\"focusout.accessible-megamenu\", \":focusable, .\" + this.settings.panelClass, $.proxy(_focusOutHandler, this)).on(\"keydown.accessible-megamenu\", $.proxy(_keyDownHandler, this)).on(\"mouseover.accessible-megamenu\", $.proxy(_mouseOverHandler, this)).on(\"mouseout.accessible-megamenu\", $.proxy(_mouseOutHandler, this)).on(\"mousedown.accessible-megamenu\", $.proxy(_mouseDownHandler, this)).on(\"click.accessible-megamenu\", $.proxy(_clickHandler, this));\n      toggleButton.on('click.accessible-megamenu', $.proxy(_clickToggleHandler, this));\n\n      if (isTouch) {\n        menu.on(\"touchmove.accessible-megamenu\", $.proxy(_touchmoveHandler, this));\n      }\n\n      if ($(document.activeElement).closest(menu).length) {\n        $(document.activeElement).trigger(\"focusin.accessible-megamenu\");\n      }\n    };\n\n    _removeEventHandlers = function _removeEventHandlers() {\n      var menu = this.menu,\n          toggleButton = this.toggleButton;\n      menu.off('.accessible-megamenu');\n\n      if (menu.find('[aria-expanded=true].' + this.settings.panelClass).length) {\n        _toggleExpandedEventHandlers.call(this, true);\n      }\n\n      toggleButton.off('.accessible-megamenu');\n    };\n    /* public attributes and methods ------------------------- */\n\n\n    return {\n      constructor: AccessibleMegaMenu,\n\n      /**\n       * @lends jQuery.fn.accessibleMegaMenu\n       * @desc Initializes an instance of the accessibleMegaMenu plugins\n       * @memberof jQuery.fn.accessibleMegaMenu\n       * @instance\n       */\n      init: function init() {\n        var settings = this.settings,\n            nav = $(this.element),\n            menu = nav.children('ol,ul').first(),\n            topnavitems = menu.children(),\n            toggleButton = nav.children('button').first();\n        this.start(settings, nav, menu, topnavitems, toggleButton);\n      },\n      start: function start(settings, nav, menu, topnavitems, toggleButton) {\n        var that = this;\n        this.settings = settings;\n        this.menu = menu;\n        this.topnavitems = topnavitems;\n        this.toggleButton = toggleButton;\n        nav.attr(\"role\", \"navigation\");\n\n        _addUniqueId.call(that, menu);\n\n        menu.addClass(settings.menuClass);\n        menu.addClass(['js', settings.menuClass].join('-'));\n        topnavitems.each(function (i, topnavitem) {\n          var topnavitemlink, topnavitempanel;\n          topnavitem = $(topnavitem);\n          topnavitem.addClass(settings.topNavItemClass);\n          topnavitemlink = topnavitem.find(\":tabbable:first\");\n          topnavitempanel = topnavitem.children(\":not(:tabbable):last\");\n\n          _addUniqueId.call(that, topnavitemlink);\n\n          if (topnavitempanel.length) {\n            _addUniqueId.call(that, topnavitempanel);\n\n            topnavitemlink.attr({\n              \"role\": \"button\",\n              \"aria-controls\": topnavitempanel.attr(\"id\"),\n              \"aria-expanded\": false,\n              \"tabindex\": 0\n            });\n            topnavitempanel.attr({\n              \"role\": \"region\",\n              \"aria-expanded\": false,\n              \"aria-hidden\": true\n            }).addClass(settings.panelClass).not(\"[aria-labelledby]\").attr(\"aria-labelledby\", topnavitemlink.attr(\"id\"));\n          }\n        });\n        this.panels = menu.find(\".\" + settings.panelClass);\n        menu.find(\"hr\").attr(\"role\", \"separator\");\n        toggleButton.addClass(settings.toggleButtonClass);\n        toggleButton.attr({\n          'aria-expanded': false,\n          'aria-pressed': false,\n          'aria-controls': menu.attr('id')\n        });\n\n        _addEventHandlers.call(this);\n      },\n\n      /**\n       * @desc Removes maga menu javascript behavior\n       * @example $(selector).accessibleMegaMenu(\"destroy\");\n       * @return {object}\n       * @memberof jQuery.fn.accessibleMegaMenu\n       * @instance\n       */\n      destroy: function destroy() {\n        this.menu.removeClass(['js', this.settings.menuClass].join('-'));\n\n        _removeEventHandlers.call(this, true);\n      },\n\n      /**\n       * @desc Get default values\n       * @example $(selector).accessibleMegaMenu(\"getDefaults\");\n       * @return {object}\n       * @memberof jQuery.fn.accessibleMegaMenu\n       * @instance\n       */\n      getDefaults: function getDefaults() {\n        return this._defaults;\n      },\n\n      /**\n       * @desc Get any option set to plugin using its name (as string)\n       * @example $(selector).accessibleMegaMenu(\"getOption\", some_option);\n       * @param {string} opt\n       * @return {string}\n       * @memberof jQuery.fn.accessibleMegaMenu\n       * @instance\n       */\n      getOption: function getOption(opt) {\n        return this.settings[opt];\n      },\n\n      /**\n       * @desc Get all options\n       * @example $(selector).accessibleMegaMenu(\"getAllOptions\");\n       * @return {object}\n       * @memberof jQuery.fn.accessibleMegaMenu\n       * @instance\n       */\n      getAllOptions: function getAllOptions() {\n        return this.settings;\n      },\n\n      /**\n       * @desc Set option\n       * @example $(selector).accessibleMegaMenu(\"setOption\", \"option_name\",  \"option_value\",  reinitialize);\n       * @param {string} opt - Option name\n       * @param {string} val - Option value\n       * @param {boolean} [reinitialize] - boolean to re-initialize the menu.\n       * @memberof jQuery.fn.accessibleMegaMenu\n       * @instance\n       */\n      setOption: function setOption(opt, value, reinitialize) {\n        this.settings[opt] = value;\n\n        if (reinitialize) {\n          this.init();\n        }\n      }\n    };\n  }();\n  /* lightweight plugin wrapper around the constructor,\n     to prevent against multiple instantiations */\n\n  /**\n   * @class accessibleMegaMenu\n   * @memberOf jQuery.fn\n   * @classdesc Implements an accessible mega menu as a jQuery plugin.\n   * <p>The mega-menu It is modeled after the mega menu on {@link http://adobe.com|adobe.com} but has been simplified for use by others. A brief description of the interaction design choices can be found in a blog post at {@link http://blogs.adobe.com/accessibility/2013/05/adobe-com.html|Mega menu accessibility on adobe.com}.</p>\n   * <h3>Keyboard Accessibility</h3>\n   * <p>The accessible mega menu supports keyboard interaction modeled after the behavior described in the {@link http://www.w3.org/TR/wai-aria-practices/#menu|WAI-ARIA Menu or Menu bar (widget) design pattern}, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item.</p>\n   * <h3>Screen Reader Accessibility</h3>\n   * <p>The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the {@link http://www.w3.org/TR/wai-aria-practices/#menu|WAI-ARIA Menu or Menu bar (widget) design pattern} with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use <code class=\"prettyprint prettyprinted\" style=\"\"><span class=\"pln\">role</span><span class=\"pun\">=</span><span class=\"str\">\"menu\"</span></code> for the menu container and <code class=\"prettyprint prettyprinted\" style=\"\"><span class=\"pln\">role</span><span class=\"pun\">=</span><span class=\"str\">\"menuitem\"</span></code> for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page.</p>\n   * @example <h4>HTML</h4><hr/>\n  &lt;nav&gt;\n  &lt;ul class=&quot;nav-menu&quot;&gt;\n      &lt;li class=&quot;nav-item&quot;&gt;\n          &lt;a href=&quot;?movie&quot;&gt;Movies&lt;/a&gt;\n          &lt;div class=&quot;sub-nav&quot;&gt;\n              &lt;ul class=&quot;sub-nav-group&quot;&gt;\n                  &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=0&quot;&gt;Action &amp;amp; Adventure&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=2&quot;&gt;Children &amp;amp; Family&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&amp;#8230;&lt;/li&gt;\n              &lt;/ul&gt;\n              &lt;ul class=&quot;sub-nav-group&quot;&gt;\n                  &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=7&quot;&gt;Dramas&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=9&quot;&gt;Foreign&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&amp;#8230;&lt;/li&gt;\n              &lt;/ul&gt;\n              &lt;ul class=&quot;sub-nav-group&quot;&gt;\n                  &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=14&quot;&gt;Musicals&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=15&quot;&gt;Romance&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&amp;#8230;&lt;/li&gt;\n              &lt;/ul&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n      &lt;li class=&quot;nav-item&quot;&gt;\n          &lt;a href=&quot;?tv&quot;&gt;TV Shows&lt;/a&gt;\n          &lt;div class=&quot;sub-nav&quot;&gt;\n              &lt;ul class=&quot;sub-nav-group&quot;&gt;\n                  &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=20&quot;&gt;Classic TV&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=21&quot;&gt;Crime TV&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&amp;#8230;&lt;/li&gt;\n              &lt;/ul&gt;\n              &lt;ul class=&quot;sub-nav-group&quot;&gt;\n                  &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=27&quot;&gt;Reality TV&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=30&quot;&gt;TV Action&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&amp;#8230;&lt;/li&gt;\n              &lt;/ul&gt;\n              &lt;ul class=&quot;sub-nav-group&quot;&gt;\n                  &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=33&quot;&gt;TV Dramas&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=34&quot;&gt;TV Horror&lt;/a&gt;&lt;/li&gt;\n                  &lt;li&gt;&amp;#8230;&lt;/li&gt;\n              &lt;/ul&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;/nav&gt;\n   * @example <h4>CSS</h4><hr/>\n  &#47;* Rudimentary mega menu CSS for demonstration *&#47;\n  &#47;* mega menu list *&#47;\n  .nav-menu {\n  display: block;\n  position: relative;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  z-index: 15;\n  }\n  &#47;* a top level navigation item in the mega menu *&#47;\n  .nav-item {\n  list-style: none;\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n  }\n  &#47;* first descendant link within a top level navigation item *&#47;\n  .nav-item &gt; a {\n  position: relative;\n  display: inline-block;\n  padding: 0.5em 1em;\n  margin: 0 0 -1px 0;\n  border: 1px solid transparent;\n  }\n  &#47;* focus/open states of first descendant link within a top level\n  navigation item *&#47;\n  .nav-item &gt; a:focus,\n  .nav-item &gt; a.open {\n  border: 1px solid #dedede;\n  }\n  &#47;* open state of first descendant link within a top level\n  navigation item *&#47;\n  .nav-item &gt; a.open {\n  background-color: #fff;\n  border-bottom: none;\n  z-index: 1;\n  }\n  &#47;* sub-navigation panel *&#47;\n  .sub-nav {\n  position: absolute;\n  display: none;\n  top: 2.2em;\n  margin-top: -1px;\n  padding: 0.5em 1em;\n  border: 1px solid #dedede;\n  background-color: #fff;\n  }\n  &#47;* sub-navigation panel open state *&#47;\n  .sub-nav.open {\n  display: block;\n  }\n  &#47;* list of items within sub-navigation panel *&#47;\n  .sub-nav ul {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 1em 0 0;\n  padding: 0;\n  }\n  &#47;* list item within sub-navigation panel *&#47;\n  .sub-nav li {\n  display: block;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  }\n   * @example <h4>JavaScript</h4><hr/>\n  &lt;!-- include jquery --&gt;\n  &lt;script src=&quot;http://code.jquery.com/jquery-1.10.1.min.js&quot;&gt;&lt;/script&gt;\n  &lt;!-- include the jquery-accessibleMegaMenu plugin script --&gt;\n  &lt;script src=&quot;js/jquery-accessibleMegaMenu.js&quot;&gt;&lt;/script&gt;\n  &lt;!-- initialize a selector as an accessibleMegaMenu --&gt;\n  &lt;script&gt;\n  $(&quot;nav:first&quot;).accessibleMegaMenu({\n      &#47;* prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby *&#47;\n      uuidPrefix: &quot;accessible-megamenu&quot;,\n       &#47;* css class used to define the megamenu styling *&#47;\n      menuClass: &quot;nav-menu&quot;,\n       &#47;* css class for a top-level navigation item in the megamenu *&#47;\n      topNavItemClass: &quot;nav-item&quot;,\n       &#47;* css class for a megamenu panel *&#47;\n      panelClass: &quot;sub-nav&quot;,\n       &#47;* css class for a group of items within a megamenu panel *&#47;\n      panelGroupClass: &quot;sub-nav-group&quot;,\n       &#47;* css class for the hover state *&#47;\n      hoverClass: &quot;hover&quot;,\n       &#47;* css class for the focus state *&#47;\n      focusClass: &quot;focus&quot;,\n       &#47;* css class for the open state *&#47;\n      openClass: &quot;open&quot;\n  });\n  &lt;/script&gt;\n   * @param {object} [options] Mega Menu options\n   * @param {string} [options.uuidPrefix=accessible-megamenu] - Prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby\n   * @param {string} [options.menuClass=accessible-megamenu] - CSS class used to define the megamenu styling\n   * @param {string} [options.topNavItemClass=accessible-megamenu-top-nav-item] - CSS class for a top-level navigation item in the megamenu\n   * @param {string} [options.panelClass=accessible-megamenu-panel] - CSS class for a megamenu panel\n   * @param {string} [options.panelGroupClass=accessible-megamenu-panel-group] - CSS class for a group of items within a megamenu panel\n   * @param {string} [options.hoverClass=hover] - CSS class for the hover state\n   * @param {string} [options.focusClass=focus] - CSS class for the focus state\n   * @param {string} [options.openClass=open] - CSS class for the open state\n   * @param {string} [options.openDelay=0] - Open delay when opening menu via mouseover\n   * @param {string} [options.closeDelay=250] - Open delay when opening menu via mouseover\n   * @param {boolean} [options.openOnMouseover=false] - Should menu open on mouseover\n   */\n\n\n  $.fn[pluginName] = function (options) {\n    return this.each(function () {\n      var pluginInstance = $.data(this, \"plugin_\" + pluginName);\n\n      if (!pluginInstance) {\n        $.data(this, \"plugin_\" + pluginName, new $.fn[pluginName].AccessibleMegaMenu(this, options));\n      } else if (typeof pluginInstance[options] === 'function') {\n        pluginInstance[options].apply(pluginInstance, Array.prototype.slice.call(arguments, 1));\n      }\n    });\n  };\n\n  $.fn[pluginName].AccessibleMegaMenu = AccessibleMegaMenu;\n  /* :focusable and :tabbable selectors from\n     https://raw.github.com/jquery/jquery-ui/master/ui/jquery.ui.core.js */\n\n  /**\n   * @private\n   */\n\n  function visible(element) {\n    return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {\n      return $.css(this, \"visibility\") === \"hidden\";\n    }).length;\n  }\n  /**\n   * @private\n   */\n\n\n  function _focusable(element, isTabIndexNotNaN) {\n    var map,\n        mapName,\n        img,\n        nodeName = element.nodeName.toLowerCase();\n\n    if (\"area\" === nodeName) {\n      map = element.parentNode;\n      mapName = map.name;\n\n      if (!element.href || !mapName || map.nodeName.toLowerCase() !== \"map\") {\n        return false;\n      }\n\n      img = $(\"img[usemap=#\" + mapName + \"]\")[0];\n      return !!img && visible(img);\n    }\n\n    return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : \"a\" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && // the element and all of its ancestors must be visible\n    visible(element);\n  }\n\n  $.extend($.expr[\":\"], {\n    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {\n      return function (elem) {\n        return !!$.data(elem, dataName);\n      };\n    }) : // support: jQuery <1.8\n    function (elem, i, match) {\n      return !!$.data(elem, match[3]);\n    },\n    focusable: function focusable(element) {\n      return _focusable(element, !isNaN($.attr(element, \"tabindex\")));\n    },\n    tabbable: function tabbable(element) {\n      var tabIndex = $.attr(element, \"tabindex\"),\n          isTabIndexNaN = isNaN(tabIndex);\n      return (isTabIndexNaN || tabIndex >= 0) && _focusable(element, !isTabIndexNaN);\n    }\n  });\n})(jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/jquery-accessibleMegaMenu.js\n");

/***/ }),

/***/ 1:
/*!***************************************************!*\
  !*** multi ./src/js/jquery-accessibleMegaMenu.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/angela/Sites/strawdog/src/js/jquery-accessibleMegaMenu.js */"./src/js/jquery-accessibleMegaMenu.js");


/***/ })

/******/ });